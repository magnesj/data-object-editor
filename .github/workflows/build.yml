name: Build Data Object Editor

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        qtver: [6.9.2]
        include:
          - os: ubuntu-latest
            compiler: gcc
          - os: windows-latest
            compiler: msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup buildcache
      run: |
        buildcache --show-stats

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{ matrix.qtver }}
        dir: "${{ github.workspace }}/Qt/"
        cache: true

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl zip unzip tar flex bison ninja-build
        sudo apt-get install -y libxkbcommon-dev libxkbcommon-x11-dev

    - name: Use MSVC (Windows)
      uses: ilammy/msvc-dev-cmd@v1

    - name: Cache vcpkg binary cache
      uses: actions/cache@v4
      with:
        path: |
          external/vcpkg/downloads
          external/vcpkg/packages
          external/vcpkg/buildtrees
          ~/.cache/vcpkg
          %APPDATA%/vcpkg
        key: vcpkg-${{ matrix.os }}-${{ matrix.qtver }}-${{ hashFiles('vcpkg.json', 'external/vcpkg/ports/**') }}
        restore-keys: |
          vcpkg-${{ matrix.os }}-${{ matrix.qtver }}-
          vcpkg-${{ matrix.os }}-

    - name: Bootstrap vcpkg (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd external/vcpkg
        ./bootstrap-vcpkg.sh

    - name: Bootstrap vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd external\vcpkg
        .\bootstrap-vcpkg.bat

    - name: Setup buildcache
      uses: CeetronSolutions/setup-buildcache-action@main

    - name: Cache buildcache artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildcache
          %USERPROFILE%\.buildcache
        key: buildcache-${{ matrix.os }}-${{ matrix.qtver }}-${{ github.sha }}
        restore-keys: |
          buildcache-${{ matrix.os }}-${{ matrix.qtver }}-
          buildcache-${{ matrix.os }}-

    - name: Configure CMake (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B build -G "Ninja" \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/${{ matrix.qtver }}/gcc_64" \
          -DCMAKE_TOOLCHAIN_FILE=external/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DCMAKE_C_COMPILER_LAUNCHER=buildcache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=buildcache

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: >
        cmake -B build -G Ninja
        -DCMAKE_BUILD_TYPE=RelWithDebInfo 
        -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/${{ matrix.qtver }}/msvc2022_64" 
        -DCMAKE_TOOLCHAIN_FILE=external/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_C_COMPILER_LAUNCHER=buildcache
        -DCMAKE_CXX_COMPILER_LAUNCHER=buildcache

    - name: Build application
      run: |
        cmake --build build --config RelWithDebInfo --target DataObjectEditorApp

    - name: Show buildcache statistics
      run: |
        buildcache --show-stats

    - name: Run tests (if available)
      run: |
        cd build
        ctest --output-on-failure -C RelWithDebInfo
      continue-on-error: true
